import java.util.ArrayList;
/**
 * BigTwo class implementation  
 * @author m2-4790k
 * 
 */
public class BigTwo implements CardGame {

	private int numOfPlayers;
	private Deck deck;
	private ArrayList<CardGamePlayer> playerList;
	private ArrayList<Hand> handsOnTable;
	private int currentIdx;

	private boolean firstPlay;
	private Hand currentPlayerHand;
	private int howManyPeoplePass = 0;
	private Hand prevPlayerHand = null;
	private BigTwoTable t;
	/**
	 * return how many players are playing this game
	 */
	@Override
	public int getNumOfPlayers() {
		// TODO Auto-generated method stub
		return playerList.size();
	}

	/**
	 * return the deck of cards used in this game
	 */
	@Override
	public Deck getDeck() {
		// TODO Auto-generated method stub
		return deck;
	}

	/**
	 * return a list of players playing this game
	 */
	@Override
	public ArrayList<CardGamePlayer> getPlayerList() {
		// TODO Auto-generated method stub
		return playerList;
	}

	/**
	 * return an array of played hand objects on the table
	 */
	@Override
	public ArrayList<Hand> getHandsOnTable() {
		// TODO Auto-generated method stub
		return handsOnTable;
	}

	/**
	 * return who is playing the game
	 */
	@Override
	public int getCurrentIdx() {
		// TODO Auto-generated method stub
		return currentIdx;
	}

	/**
	 * a method deciding whether the game is ended, return true if the game is ended, false if the game should not end
	 */
	@Override
	public boolean endOfGame() {
		if (playerList.get(0).getNumOfCards() == 0 || playerList.get(1).getNumOfCards() == 0
				|| playerList.get(2).getNumOfCards() == 0 || playerList.get(3).getNumOfCards() == 0) {
			return true;// game ended
		} else {// game continues
			return false;
		}
	}

	/**
	 * public constructor for BigTwo class
	 */
	public BigTwo() {

		// initializing variables, there will be 4 players and 52 cards in a
		// BigTwo game
		numOfPlayers = 4;
		playerList = new ArrayList<CardGamePlayer>();
		handsOnTable = new ArrayList<Hand>();
		deck = new BigTwoDeck();
		deck.initialize();
		
		// add card game players into the playerList and randomly distributes 13
		// cards for each player
		for (int i = 0; i < 4; i++) {
			CardGamePlayer player = new CardGamePlayer();
			for (int j = 0; j < 13; j++) {
				player.addCard(deck.getCard(i * 13 + j));
			}
			player.sortCardsInHand();
			playerList.add(player);
		}

		// before everything begin make sure everything is right
		/* For debug use **************************************************/
		/*System.out.println("Num of player: " + numOfPlayers);
		for (CardGamePlayer p : playerList) {
			System.out.println(
					"name: " + p.getName() + "score: " + p.getScore() + "num hand: " + p.getNumOfCards() + " list: ");
			p.getCardsInHand().print();
		}
		System.out.println("current id : " + currentIdx);
		/* For debug use **************************************************/
		
		firstPlay = true;
		currentPlayerHand = null;
		howManyPeoplePass = 0;
		prevPlayerHand = null;
	}

	/**
	 * create a BigTwo game test the game
	 * @param input argument
	 */
	
	 public static void main(String[] args) { 
		 BigTwo firstRound = new BigTwo(); 
		 firstRound.start(); 
	 }

	@Override
	public void start(Deck deck) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void makeMove(int playerID, int[] cardIdx) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void checkMove(int playerID, int[] cardIdx) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isPlaying() {
		// TODO Auto-generated method stub
		return false;
	}
}
