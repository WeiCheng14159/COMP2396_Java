import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;

public class BigTwoClient implements CardGame, NetworkGame{

	private static final Object  = null;
	private int numOfPlayers;
	private Deck deck;
	private ArrayList<CardGamePlayer> playerList;
	private ArrayList<Hand> handsOnTable;
	private int playerID;
	private String serverIP;
	private int serverPort;
	private Socket sock;
	private ObjectOutputStream oos;
	private int currentIdx;
	private BigTwoTable table;
	
	public BigTwoClient(){
		//create a list of palyers
		this.playerList = new ArrayList<CardGamePlayer>();
		this.playerList.add(new CardGamePlayer());
		this.playerList.add(new CardGamePlayer());
		this.playerList.add(new CardGamePlayer());
		this.playerList.add(new CardGamePlayer());
		
		//create a big two table
		this.table  = new BigTwoTable(new BigTwo());
	}
	
	@Override
	public int getNumOfPlayers() {
		// TODO Auto-generated method stub
		return playerList.size();
	}

	@Override
	public Deck getDeck() {
		// TODO Auto-generated method stub
		return this.deck;
	}

	@Override
	public ArrayList<CardGamePlayer> getPlayerList() {
		// TODO Auto-generated method stub
		return playerList;
	}

	@Override
	public ArrayList<Hand> getHandsOnTable() {
		// TODO Auto-generated method stub
		return handsOnTable;
	}

	@Override
	public int getCurrentIdx() {
		// TODO Auto-generated method stub
		return currentIdx;
	}

	@Override
	public void start(Deck deck) {
		// TODO Auto-generated method stub
		
		numOfPlayers = 4;
		this.handsOnTable = new ArrayList<Hand>();
		deck = new BigTwoDeck();
		deck.initialize();
		
		// add card game players into the playerList and randomly distributes 13
		// cards for each player
		for (int i = 0; i < 4; i++) {
			CardGamePlayer player = new CardGamePlayer();
			for (int j = 0; j < 13; j++) {
				player.addCard(deck.getCard(i * 13 + j));
			}
			player.sortCardsInHand();
			playerList.add(player);
		}
		
		
		for (int i = 0; i < playerList.size(); i++) {
			if (playerList.get(i).getCardsInHand().contains(new BigTwoCard(0, 2))) {
				this.currentIdx = i;
				break;
			}
		}
		
		this.table.setActivePlayer(this.playerID);
		this.table.setActiveSelection(this.playerID);
		
	}

	@Override
	public void makeMove(int playerID, int[] cardIdx) {
		// TODO Auto-generated method stub
		
		CardGameMessage c = new CardGameMessage(CardGameMessage.MOVE, playerID, cardIdx);
		this.sendMessage(c);
		
	}

	@Override
	public void checkMove(int playerID, int[] cardIdx) {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
				CardList userWantToPlay = new CardList();
				if (cardIdx.length == 0) {
					//System.out.println("player play nothing error");
					t.println("player play nothing error");
				} else {
					for (int i = 0; i < cardIdx.length; i++) {
						userWantToPlay.addCard(this.playerList.get(currentIdx).getCardsInHand().getCard(cardIdx[i]));
					} // what cards do user want to play ?
				}

				CardGamePlayer currentPlayer = playerList.get(currentIdx);//define current user
				Card smallThree = new BigTwoCard(0, 2);//define small three card which should play first

				this.currentPlayerHand = new Hand(currentPlayer, userWantToPlay);
				if (currentPlayerHand.isValid()) {// hand is valid
					t.println(currentPlayerHand.toString());
					if (firstPlay) {// first hand in the game, player should play diamond three in the first round
						if (userWantToPlay.contains(smallThree)) {//user follows the rule
							firstPlay = false;
							currentPlayer.removeCards(userWantToPlay);
							handsOnTable.add(currentPlayerHand);
							prevPlayerHand = currentPlayerHand;
							currentIdx++;
							currentIdx = currentIdx % this.getNumOfPlayers();
						} else {//not a legal move
							t.println("Not a legal move!!!");
							t.println("Player must play \u26663 in the first round.");
							//System.out.println("Not a legal move!!!");
							//System.out.println("Player must play \u26663 in the first round.");
						}
					} else {// not first play, normal round
						if (howManyPeoplePass >= 3) {// you can play any hand, you have the biggest hand
							howManyPeoplePass = 0;
							currentIdx++;
							currentIdx = currentIdx % this.getNumOfPlayers();
							currentPlayer.removeCards(userWantToPlay);
							handsOnTable.add(currentPlayerHand);
							prevPlayerHand = currentPlayerHand;
						} else {// your hand must beat someone
							if (currentPlayerHand.beats(prevPlayerHand)) {// you beat it !
								howManyPeoplePass = 0;
								currentPlayer.removeCards(userWantToPlay);
								handsOnTable.add(currentPlayerHand);
								prevPlayerHand = currentPlayerHand;
								currentIdx++;
								currentIdx = currentIdx % this.getNumOfPlayers();
							} else {// your hand cannot beat someone
								t.println("your card is valid but cannot beat the cards on the table");
								//System.out.println("your card is valid but cannot beat the cards on the table");
							}
						}
					}
				} else {// this is not a valid hand in this game
					//System.out.println("Not a valid hand");
					t.println("Not a valid hand");
				}
	}

	@Override
	public boolean isPlaying() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean endOfGame() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int getPlayerID() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setPlayerID(int playerID) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String getPlayerName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setPlayerName(String playerName) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String getServerIP() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setServerIP(String serverIP) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int getServerPort() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setServerPort(int serverPort) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void makeConnection() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void parseMessage(GameMessage message) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void sendMessage(GameMessage message) {
		// TODO Auto-generated method stub
		
	}

}
